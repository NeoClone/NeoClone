unit Memory;

interface

uses
  Classes, SysUtils, Windows, Messages, Variants, Dialogs, addresses,
  PSAPI, TlHelp32;

type
  TMemory = class
  private
    FTProc: integer;
  public
   function GetModuleBaseAddress(pid: Cardinal; MName: String): Pointer;
    function ReadByte( addr: integer ): byte;
    function ReadWord(addr: Integer): integer;
    function ReadInteger( addr: integer ): integer;
    function ReadPointer( addr: integer; offsets: array of integer; firstClean: boolean = true ): integer;
    function ReadString( addr: Integer ): String;
    procedure ReadPacket(addr: Integer; var arr: array of byte);
  end;

var
ADDR_BASE: Pointer;

implementation

uses
  unit1;


  { Returns Tibia.exe base address }
{ @author unknown }
function TMemory.GetModuleBaseAddress(pid: Cardinal; MName: String): Pointer;
var
  Modules         : Array of HMODULE;
  cbNeeded, i     : Cardinal;
  ModuleInfo      : TModuleInfo;
  ModuleName      : Array[0..MAX_PATH] of Char;
  PHandle         : THandle;
begin
  Result := nil;
  SetLength(Modules, 1024);
  PHandle := OpenProcess(PROCESS_QUERY_INFORMATION + PROCESS_VM_READ, False, pid);
  if (PHandle <> 0) then
  begin
    EnumProcessModules(PHandle, @Modules[0], 1024 * SizeOf(HMODULE), cbNeeded); //Getting the enumeration of modules
    SetLength(Modules, cbNeeded div SizeOf(HMODULE)); //Setting the number of modules
    for i := 0 to Length(Modules) - 1 do //Start the bucle
    begin
      GetModuleBaseName(PHandle, Modules[i], ModuleName, SizeOf(ModuleName)); //Getting the name of module
      if AnsiCompareText(MName, ModuleName) = 0 then //If the module name match with the name of module we are looking for...
      begin
        GetModuleInformation(PHandle, Modules[i], @ModuleInfo, SizeOf(ModuleInfo)); //Get the information of module
        Result := ModuleInfo.lpBaseOfDll; //Return the information we want (The image base address)
        CloseHandle(PHandle);
        Exit;
      end;
    end;
  end;
end;


function TMemory.ReadByte(addr: Integer): byte;
var
  NBR: NativeUInt;
begin
  FTProc := Main.TProc;
// here we subtract 400000 from ADD_BASE and add our address.
  ReadProcessMemory(FTProc, Ptr(Integer(ADDR_BASE) + Integer(Addr)), @result, 1, NBR);
end;

function TMemory.ReadWord(addr: Integer): integer;
var
  NBR: NativeUInt;
  aa: word;
begin
  FTProc := Main.TProc;
// here we subtract 400000 from ADD_BASE and add our address.
  ReadProcessMemory(FTProc, Ptr(Integer(ADDR_BASE) + Integer(Addr)), @aa, 2, NBR);
  result := aa;
end;

function TMemory.ReadInteger(addr: Integer): integer;
var
  NBR: NativeUInt;
begin
  FTProc := Main.TProc;
// here we subtract 400000 from ADD_BASE and add our address.
  ReadProcessMemory(FTProc, Ptr(Integer(ADDR_BASE) + Integer(Addr)), @result, 4, NBR);
end;

function TMemory.ReadPointer( addr: integer; offsets: array of integer; firstClean: boolean = true ): integer;
var
  NBR: NativeUInt;
  p, i: integer;
begin
  FTProc := Main.TProc;

  if firstClean then
// here we subtract 400000 from ADD_BASE and add our address.
    ReadProcessMemory(FTProc, Ptr(Integer(ADDR_BASE) + Integer(Addr)), @p, 4, NBR)
  else
    p := addr;

  for i := Low(offsets) to High(offsets) do
  begin
    p := p + offsets[i];
// here we subtract 400000 from ADD_BASE and add our address.
    ReadProcessMemory(FTProc, Ptr(Integer(ADDR_BASE) + Integer(p)), @p, 4, NBR);
  end;

  result := p;
end;

function TMemory.ReadString(addr: Integer): String;
var
  NB : NativeUInt;
  Temp : ARRAY [1..255] OF Byte;
  I : Byte;
begin
  FTProc := Main.TProc;
  Result := '';
// here we subtract 400000 from ADD_BASE and add our address.
//FUCK YOUUUUUUU, those 400000 shouldn't be there!
  ReadProcessMemory(FTProc, Ptr(Integer(ADDR_BASE)  + Integer(Addr)), @Temp[1], 255, NB);
  for I := 1 to 255 do
  begin
    if ((Temp[i] = 0) or (Temp[i] = $0F)) then
      Break;
    Result := Result + Chr(Temp[i]);
  end;
end;

procedure TMemory.ReadPacket(addr: Integer; var arr: array of byte);
var
  NB : NativeUInt;
  len: integer;
  I : Byte;
begin
  FTProc := Main.TProc;
  len := ReadWord(addr);
// here we subtract 400000 from ADD_BASE and add our address.
  ReadProcessMemory(FTProc, Ptr(Integer(ADDR_BASE) + Integer(Addr)), @arr[1], len, NB);
end;



end.
