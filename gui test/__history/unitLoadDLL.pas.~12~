unit unitLoadDLL;

interface

uses Windows, Dialogs;

type
  TShowme = procedure();
  TCloseme = procedure();
  TGethandle = function():integer;

  TaddDisplayItem = procedure( index: integer; item: string );
  TredrawDisplay = procedure( index: integer );
  TaddDisplay = function():integer;
  TdelDisplay = procedure( index: integer );

var
  showme : TShowme = nil;
  closeme : TCloseme = nil;
  gethandle : TGethandle = nil;

  addDisplayItem : TaddDisplayItem = nil;
  redrawDisplay : TredrawDisplay = nil;
  addDisplay : TaddDisplay = nil;
  delDisplay : TdelDisplay = nil;

  DllHandle : THandle;

  function LoadLib : Boolean;
  procedure UnloadLib;

implementation

function LoadLib : Boolean;
begin
  if DllHandle = 0 then begin
    DllHandle := LoadLibrary('C:\Users\Ja\Desktop\Projekty\delphi\gui test\huddll\Win32\Debug\huddll.dll');
    if DllHandle > 0 then begin
      @showme := GetProcAddress(DllHandle,'showme');
      @closeme := GetProcAddress(DllHandle,'closeme');
      @gethandle := GetProcAddress(DllHandle,'gethandle');

      @addDisplayItem := GetProcAddress(DllHandle,'addDisplayItem');
      @redrawDisplay := GetProcAddress(DllHandle,'redrawDisplay');
      @addDisplay := GetProcAddress(DllHandle,'addDisplay');
      @delDisplay := GetProcAddress(DllHandle,'delDisplay');

    end
    else begin
      MessageDlg('HUD functionality is not available', mtInformation, [mbOK], 0);
    end;
  end;
  Result := DllHandle <> 0;
end;

procedure UnloadLib;
begin
  if DLLHandle <> 0 then begin
    FreeLibrary(DLLHandle);
    DllHandle := 0;
  end;
end;

initialization
  LoadLib;

finalization
  UnloadLib;
end.
