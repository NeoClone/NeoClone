unit Memory;

interface

uses
  Classes, SysUtils, Windows, Messages, Variants, Dialogs, addresses;

type
  TMemory = class
  private
    FTProc: integer;
  public
    function ReadByte( addr: integer ): byte;
    function ReadWord(addr: Integer): integer;
    function ReadInteger( addr: integer ): integer;
    function ReadPointer( addr: integer; offsets: array of integer; firstClean: boolean = true ): integer;
    function ReadString( addr: Integer ): String;
    procedure ReadPacket(addr: Integer; var arr: array of byte);
  end;


implementation

uses
  unit1;

function TMemory.ReadByte(addr: Integer): byte;
var
  NBR: NativeUInt;
begin
  FTProc := Main.TProc;
  ReadProcessMemory(FTProc, Ptr(addr), @result, 1, NBR);
end;

function TMemory.ReadWord(addr: Integer): integer;
var
  NBR: NativeUInt;
  aa: word;
begin
  FTProc := Main.TProc;
  ReadProcessMemory(FTProc, Ptr(addr), @aa, 2, NBR);
  result := aa;
end;

function TMemory.ReadInteger(addr: Integer): integer;
var
  NBR: NativeUInt;
begin
  FTProc := Main.TProc;
  ReadProcessMemory(FTProc, Ptr(addr), @result, 4, NBR);
end;

function TMemory.ReadPointer( addr: integer; offsets: array of integer; firstClean: boolean = true ): integer;
var
  NBR: NativeUInt;
  p, i: integer;
begin
  FTProc := Main.TProc;

  if firstClean then
    ReadProcessMemory(FTProc, Ptr(addr), @p, 4, NBR)
  else
    p := addr;

  for i := Low(offsets) to High(offsets) do
  begin
    p := p + offsets[i];
    ReadProcessMemory(FTProc, Ptr(p), @p, 4, NBR);
  end;

  result := p;
end;

function TMemory.ReadString(addr: Integer): String;
var
  NB : NativeUInt;
  Temp : ARRAY [1..255] OF Byte;
  I : Byte;
begin
  FTProc := Main.TProc;
  Result := '';
  ReadProcessMemory(FTProc, Ptr(addr), @Temp[1], 255, NB);
  for I := 1 to 255 do
  begin
    if ((Temp[i] = 0) or (Temp[i] = $0F)) then
      Break;
    Result := Result + Chr(Temp[i]);
  end;
end;

procedure TMemory.ReadPacket(addr: Integer; var arr: array of byte);
var
  NB : NativeUInt;
  len: integer;
  I : Byte;
begin
  FTProc := Main.TProc;
  len := ReadWord(addr);
  ReadProcessMemory(FTProc, Ptr(addr), @arr[1], len, NB);
end;



end.
