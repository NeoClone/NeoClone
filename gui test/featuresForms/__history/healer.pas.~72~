unit healer;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Spin, ComCtrls, ExtCtrls, addresses, settingsXML;

type
  
  pHealRules = ^THealRules; 
  THealRules = record
    name: string;

    healthFrom: integer;
    healthTo: integer;
    healthType: string;

    manaFrom: integer;
    manaTo: integer;
    manaType: string;

    healMethod: string;

    extraCondition: string;

    spamRateFrom: integer;
    spamRateTo: integer;

    methodPriority: TMethodPriority;
  end;

  ThealerForm = class(TForm)
    PageControl1: TPageControl;
    TabSheet2: TTabSheet;
    TabSheet1: TTabSheet;
    ListBox1: TListBox;
    Edit1: TEdit;
    Label2: TLabel;
    healthFrom: TSpinEdit;
    Label1: TLabel;
    healthTo: TSpinEdit;
    healthType: TComboBox;
    manaFrom: TSpinEdit;
    Label6: TLabel;
    Label3: TLabel;
    manaTo: TSpinEdit;
    manaType: TComboBox;
    Label4: TLabel;
    healMethod: TComboBox;
    Label5: TLabel;
    extraCondition: TComboBox;
    Label8: TLabel;
    spamRateFrom: TSpinEdit;
    Label7: TLabel;
    spamRateTo: TSpinEdit;
    Button2: TButton;
    Button1: TButton;
    TabSheet3: TTabSheet;
    methodPriority: TButton;
    Label9: TLabel;
    mtManaMissingFrom: TSpinEdit;
    Label10: TLabel;
    mtManaMissingTo: TSpinEdit;
    Label11: TLabel;
    mtTrainSpell: TComboBox;
    Label12: TLabel;
    mtSpamRateFrom: TSpinEdit;
    Label13: TLabel;
    mtSpamRateTo: TSpinEdit;
    Label14: TLabel;
    Label15: TLabel;
    Button4: TButton;
    mtActive: TCheckBox;
    CheckBox2: TCheckBox;
    SpinEdit11: TSpinEdit;
    Label16: TLabel;
    procedure Button1Click(Sender: TObject);
    procedure ListBox1Click(Sender: TObject);
    procedure Edit1Change(Sender: TObject);
  private
    
  public
    //function exportToXML(): string;
  end;

var
  healerForm: ThealerForm;

implementation

{$R *.dfm}

function FindIndex(control: TComboBox; value: string): integer;
var
  i: integer;
begin
  result := -1;
  for i := 0 to control.Items.Count - 1 do
  begin
    if lowercase(control.Items[i]) = lowercase(value) then
    begin
      result := i;
      break;
    end;
  end;
end;

function GetValue(control: TComboBox): string;
begin
  result := '';
  if control.ItemIndex > -1 then
  begin
    result := control.Items[control.ItemIndex];
  end;
end;

procedure ThealerForm.Button1Click(Sender: TObject);
var
  rec: pHealRules;  
  name: string;
begin

  name := 'HealRule' + inttostr(listbox1.Items.Count+1);

  New(rec);
  rec^.name := name;
  rec^.healthFrom := 0;
  rec^.healthTo := 0;
  rec^.healthType := 'exact';
  rec^.manaFrom := 0;
  rec^.manaTo := 0;
  rec^.manaType := 'exact';
  rec^.healMethod := 'Light Healing';
  rec^.extraCondition := 'no condition';
  rec^.spamRateFrom := 200;
  rec^.spamRateTo := 400;

  listbox1.Items.AddObject(name, TObject(rec));
  listbox1.ItemIndex := listbox1.Items.Count-1;

  // enabling
  edit1.Enabled := true;

  healthFrom.Enabled := true;
  healthTo.Enabled := true;
  healthType.Enabled := true;

  manaFrom.Enabled := true;
  manaTo.Enabled := true;
  manaType.Enabled := true;

  healMethod.Enabled := true;
  extraCondition.Enabled := true;

  spamRateFrom.Enabled := true;
  spamRateTo.Enabled := true;

  methodPriority.Enabled := true;

  button2.Enabled := true;

  healerForm.ListBox1Click(sender);
  
end;

procedure ThealerForm.Edit1Change(Sender: TObject);
var
  rec: pHealRules;
begin

  rec := pHealRules(ListBox1.Items.Objects[listbox1.ItemIndex]);

  rec^.name := edit1.Text;

  if (length(healthFrom.Text) = 0) then exit;
  if (length(healthTo.Text) = 0) then exit;

  if (length(manaFrom.Text) = 0) then exit;
  if (length(manaTo.Text) = 0) then exit;

  if (length(spamRateFrom.Text) = 0) then exit;
  if (length(spamRateTo.Text) = 0) then exit;

  rec^.healthFrom := healthFrom.Value;
  rec^.healthTo := healthTo.Value;
  rec^.healthType := GetValue(healthType);

  rec^.manaFrom := manaFrom.Value;
  rec^.manaTo := manaTo.Value;
  rec^.manaType := GetValue(manaType);

  rec^.healMethod := GetValue(healMethod);
  rec^.extraCondition := GetValue(extraCondition);

  rec^.spamRateFrom := spamRateFrom.Value;
  rec^.spamRateTo := spamRateTo.Value;

  ListBox1.Items.Objects[listbox1.ItemIndex] := TObject(rec);
  ListBox1.Items.Strings[ListBox1.ItemIndex] := rec^.name;

end;

procedure ThealerForm.ListBox1Click(Sender: TObject);
var
  rec: pHealRules;
begin

  if ListBox1.ItemIndex > -1 then
  begin

    // begin write nil to onChange
    edit1.OnChange := nil;

    healthFrom.OnChange := nil;
    healthTo.OnChange := nil;
    healthType.OnChange := nil;

    manaFrom.OnChange := nil;
    manaTo.OnChange := nil;
    manaType.OnChange := nil;

    healMethod.OnChange := nil;
    extraCondition.OnChange := nil;

    spamRateFrom.OnChange := nil;
    spamRateTo.OnChange := nil;

    // begin read values
    rec := pHealRules(ListBox1.Items.Objects[listbox1.ItemIndex]);

    edit1.Text := rec^.name;

    healthFrom.Value := rec^.healthFrom;
    healthTo.Value := rec^.healthTo;
    healthType.ItemIndex := FindIndex(healthType, rec^.healthType);

    manaFrom.Value := rec^.manaFrom;
    manaTo.Value := rec^.manaTo;
    manaType.ItemIndex := FindIndex(manaType, rec^.manaType);

    healMethod.ItemIndex := FindIndex(healMethod, rec^.healMethod);
    extraCondition.ItemIndex := FindIndex(extraCondition, rec^.extraCondition);

    spamRateFrom.Value := rec^.spamRateFrom;
    spamRateTo.Value := rec^.spamRateTo;

    // begin setup onChange;
    edit1.OnChange := healerForm.Edit1Change;

    healthFrom.OnChange := healerForm.Edit1Change;
    healthTo.OnChange := healerForm.Edit1Change;
    healthType.OnChange := healerForm.Edit1Change;

    manaFrom.OnChange := healerForm.Edit1Change;
    manaTo.OnChange := healerForm.Edit1Change;
    manaType.OnChange := healerForm.Edit1Change;

    healMethod.OnChange := healerForm.Edit1Change;
    extraCondition.OnChange := healerForm.Edit1Change;

    spamRateFrom.OnChange := healerForm.Edit1Change;
    spamRateTo.OnChange := healerForm.Edit1Change;


    button2.Enabled := true;
  end else
    button2.Enabled := false;

end;

end.
